[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "labellerr-sdk"
version = "1.0.0"
description = "Python SDK for Labellerr API"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Labellerr Team", email = "support@labellerr.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["labellerr", "api", "sdk", "machine-learning", "data-annotation", "async"]
requires-python = ">=3.7"
dependencies = [
    "requests>=2.25.0",
    "urllib3>=1.26.0",
    "aiohttp>=3.8.0",
    "aiofiles>=0.8.0",
    "certifi>=2021.5.25",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-asyncio>=0.18.0",
    "pytest-cov>=2.10.0",
    "black>=21.0.0",
    "flake8>=3.8.0",
    "mypy>=0.800",
    "isort>=5.0.0",
    "python-dotenv>=1.0.0",
    "build>=0.3.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "myst-parser>=0.15.0",
]

[project.urls]
Homepage = "https://github.com/tensormatics/SDKPython"
Documentation = "https://github.com/tensormatics/SDKPython#readme"
Repository = "https://github.com/tensormatics/SDKPython"
"Bug Tracker" = "https://github.com/tensormatics/SDKPython/issues"
Changelog = "https://github.com/tensormatics/SDKPython/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
include = ["labellerr*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
labellerr = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py37']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["labellerr"]

[tool.mypy]
python_version = "3.8"
files = ["labellerr"]
exclude = "(^tests/|labellerr_integration_case_tests.py$)"
ignore_missing_imports = true
follow_imports = "silent"
allow_redefinition = true
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["labellerr"]
omit = ["tests/*", "*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
